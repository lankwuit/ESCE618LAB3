/**
 **********************************************************************************************************************
 * @file       sketch_2_Hello_Wall.pde
 * @author     Steve Ding, Colin Gallacher
 * @version    V3.0.0
 * @date       09-Feb-2023
 * @brief      Wall haptic example with programmed physics for a haptic wall 
 **********************************************************************************************************************
 * @attention
 *
 *
 **********************************************************************************************************************
 */
 
  /* library imports *****************************************************************************************************/ 
import processing.serial.*;
import static java.util.concurrent.TimeUnit.*;
import java.util.concurrent.*;
/* end library imports *************************************************************************************************/  


/* scheduler definition ************************************************************************************************/ 
private final ScheduledExecutorService scheduler      = Executors.newScheduledThreadPool(1);
/* end scheduler definition ********************************************************************************************/ 



/* device block definitions ********************************************************************************************/
Board             haplyBoard;
Device            widgetOne;
Mechanisms        pantograph;

byte              widgetOneID                         = 5;
int               CW                                  = 0;
int               CCW                                 = 1;
boolean           renderingForce                     = false;
/* end device block definition *****************************************************************************************/



/* framerate definition ************************************************************************************************/
long              baseFrameRate                       = 120;
/* end framerate definition ********************************************************************************************/ 



/* elements definition *************************************************************************************************/

/* Screen and world setup parameters */
float             pixelsPerMeter                      = 4000.0;
float             pixelsPerhoriunit;
float             pixelsPervertunit;

//sub-dimension horinzontal-wise and vertical wise
int               dimh, dimv;

float             radsPerDegree                       = 0.01745;

/* pantagraph link parameters in meters */
float             l                                   = 0.07;
float             L                                   = 0.09;


//end effector size in pixels
float             rEEpixel                             = 25;
float             rEE                                  = rEEpixel/pixelsPerMeter;
// for serving the 140 x 80 pixel size subspace
float             rEEx                                 = rEEpixel/dimh;
float             rEEy                                 = rEEpixel/dimv;

/* virtual wall parameter  */
float             kWall                               = 450;
PVector           fWall                               = new PVector(0, 0);
PVector           penWall                             = new PVector(0, 0);
PVector           pos1                                = new PVector(0.01, 0.10);
PVector           pos2                                = new PVector(0.01, 0.10);
PVector           pos3                                = new PVector(0.01, 0.10);
PVector           pos4                                = new PVector(0.01, 0.10);



/* generic data for a 2DOF device */
/* joint space */
PVector           angles                              = new PVector(0, 0);
PVector           torques                             = new PVector(0, 0);

/* task space */
//the new sub-coordinate posEEsc
PVector           posEEsc                             = new PVector(0, 0);
PVector           posEE                               = new PVector(0, 0);
PVector           fEE                                 = new PVector(0, 0); 

/* device graphical position */
PVector           deviceOrigin                        = new PVector(0, 0);

/* World boundaries reference */
final int         worldPixelWidth                     = 1000;
final int         worldPixelHeight                    = 650;


/* graphical elements */
PShape pGraph, joint, endEffector;
PShape wall;
/* end elements definition *********************************************************************************************/ 



/* setup section *******************************************************************************************************/
void setup(){
  /* put setup code here, run once: */
  
  /* screen size definition */
  size(1000, 650);
  
  /* device setup */
  
  /**  
   * The board declaration needs to be changed depending on which USB serial port the Haply board is connected.
   * In the base example, a connection is setup to the first detected serial device, this parameter can be changed
   * to explicitly state the serial port will look like the following for different OS:
   *
   *      windows:      haplyBoard = new Board(this, "COM10", 0);
   *      linux:        haplyBoard = new Board(this, "/dev/ttyUSB0", 0);
   *      mac:          haplyBoard = new Board(this, "/dev/cu.usbmodem1411", 0);
   */ 
  haplyBoard          = new Board(this, "COM3", 0);
  widgetOne           = new Device(widgetOneID, haplyBoard);
  pantograph          = new Pantograph();
  
  widgetOne.set_mechanism(pantograph);
  
  widgetOne.add_actuator(1, CCW, 2);
  widgetOne.add_actuator(2, CW, 1);
 
  widgetOne.add_encoder(1, CCW, 241, 10752, 2);
  widgetOne.add_encoder(2, CW, -61, 10752, 1);
  
  widgetOne.device_set_parameters();
    
  
  /* visual elements setup */
  background(0);

  /* setup framerate speed */
  frameRate(baseFrameRate);
  
  
  /* setup simulation thread to run at 1kHz */ 
  SimulationThread st = new SimulationThread();
  scheduler.scheduleAtFixedRate(st, 1, 1, MILLISECONDS);
}
/* end setup section ***************************************************************************************************/



/* draw section ********************************************************************************************************/
void draw(){
  /* put graphical code here, runs repeatedly at defined framerate in setup, else default at 60fps: */
  if(renderingForce == false){
    background(0); 
  }
}
/* end draw section ****************************************************************************************************/



/* simulation section **************************************************************************************************/
class SimulationThread implements Runnable{
  
  public void run(){
    /* put haptic simulation code here, runs repeatedly at 1kHz as defined in setup */
    
    renderingForce = true;
    
    if(haplyBoard.data_available()){
      /* GET END-EFFECTOR STATE (TASK SPACE) */
      widgetOne.device_read_data();
    
      angles.set(widgetOne.get_device_angles()); 
      posEE.set(widgetOne.get_device_position(angles.array()));
      posEE.set(device_to_graphics(posEE)); 
      // end of reading the end effector position
      /* haptic wall force calculation */
      fWall.set(0, 0);

      //insert code below
      setupstage1();
      scenario1();

      
      /* end haptic wall force calculation */
    }
    
    
    torques.set(widgetOne.set_device_torques(fEE.array()));
    widgetOne.device_write_torques();
  
  
    renderingForce = false;
  }
}
/* end simulation section **********************************************************************************************/


/* helper functions section, place helper functions here ***************************************************************/

void setupstage1(){
  //define the dimension into a 4 x 8 sub-space
  dimh = 4; dimv = 9;
  pixelsPerhoriunit = worldPixelWidth/dimh;
  pixelsPervertunit = worldPixelHeight/dimv;
  rEEpixel = 100;
  rEE   = rEEpixel/pixelsPerMeter;
  rEEx  = rEEpixel/dimh;
  rEEy  = rEEpixel/dimv;

  kWall = 5;
}

void scenario1(){
    PVector         posborder1 = new PVector(1,0);
    PVector         posborder2 = new PVector(2,0);
    PVector         posborder3 = new PVector(3,0);
    PVector         posborder4 = new PVector(4,0);

    PVector         converg1 = new PVector(0,3);
    PVector         converg2 = new PVector(0,6);
    PVector         converg3 = new PVector(0,5);
    PVector         converg4 = new PVector(0,4);

    posEEsc.set(posEE.x*pixelsPerMeter/pixelsPerhoriunit+dimh/2,posEE.y*pixelsPerMeter/pixelsPervertunit);
    float temp, temp2;

    if(posEEsc.x < 1.0){
      penWall.set(0, (converg1.y>posEEsc.y ? (-converg1.y+posEEsc.y+rEEy):(converg1.y- posEEsc.y-rEEy)));
    }else if(posEEsc.x < 2.0){
      penWall.set(0, (converg2.y>posEEsc.y ? (-converg2.y+posEEsc.y+rEEy):(converg2.y- posEEsc.y-rEEy)));
    }else if(posEEsc.x < 3.0){
      penWall.set(0, (converg3.y>posEEsc.y ? (-converg3.y+posEEsc.y+rEEy):(converg3.y- posEEsc.y-rEEy)));
    }else if(posEEsc.x < 4.0){
      penWall.set(0, (converg4.y>posEEsc.y ? (-converg4.y+posEEsc.y+rEEy):(converg4.y- posEEsc.y-rEEy)));
    }
    if(penWall.y < 0){
      fWall = fWall.add(penWall.mult(-kWall));  
    }
    println(posEEsc);
    
    fEE = (fWall.copy()).mult(-1);
    fEE.set(graphics_to_device(fEE));
}






PVector device_to_graphics(PVector deviceFrame){
  return deviceFrame.set(-deviceFrame.x, deviceFrame.y);
}


PVector graphics_to_device(PVector graphicsFrame){
  return graphicsFrame.set(-graphicsFrame.x, graphicsFrame.y);
}



/* end helper functions section ****************************************************************************************/




 
